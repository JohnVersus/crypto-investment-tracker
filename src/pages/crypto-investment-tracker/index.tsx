import Head from "next/head";
import type { NextPage, GetServerSideProps } from "next";
import { Box, FlexBox } from "~/components/atoms";
import { CryptoInvestmentTrackerLayout } from "~/components/Layout";
import CryptoForm from "~/components/molecules/CryptoForm";
import SavedData from "~/components/organisms/SavedData";
import { useCryptoData } from "~/hooks/useCryptoData";
import ToggleButton from "~/components/atoms/ToggleButton";
import { useEffect, useState } from "react";
import type { CoinData } from "~/pages/api/getCoin";
import typedFetch from "~/utils/typedFetch";
import { getSession } from "next-auth/react";
import type { Session } from "next-auth";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getSession(ctx);
  console.log({ session });
  const apiUrl = process.env.NEXTAUTH_URL;
  if (!apiUrl) throw new Error("Add app url in env");
  try {
    const coins = await typedFetch<CoinData[]>(`${apiUrl}/api/getCoin`);
    return {
      props: {
        coins,
        userSession: session,
      },
    };
  } catch (error) {
    console.log({ error });
    return {
      props: {
        coins: {},
        userSession: session,
      },
    };
  }
};

type IndexPageProps = {
  coins: CoinData[];
  userSession: Session;
};

const IndexPage: NextPage<IndexPageProps> = ({ coins, userSession }) => {
  const { data, saveCryptoData, migrateLocalData, dataFetched, status, error } =
    useCryptoData();

  useEffect(() => {
    console.log({ userSession });
    console.log({ dataFetched });
    if (userSession) {
      migrateLocalData()
        .then()
        .catch((e) => {
          console.log(e);
        });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userSession, dataFetched]);

  useEffect(() => {
    if (error) {
      alert(error.message);
    }
  }, [error]);
  const [formHidden, setFormHidden] = useState<boolean>(
    (data?.length || 0) > 0
  );

  const toggleFormVisibility = () => {
    setFormHidden((prevHidden) => !prevHidden);
  };

  return (
    <CryptoInvestmentTrackerLayout>
      <Head>
        <title>Crypto Investment Tracker | JohnVersus</title>
        <meta name="description" content="Generated by JohnVersus" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.28.0/feather.min.css"
        integrity="sha384-7JpDzDHVT7ZzizD+7+r7ornyqmzNL8/9CJXzbi6vjC+cY5N5g5h5Q5/1M5AS5N5r"
        crossOrigin="anonymous"
      /> */}
      <Box
        as={"main"}
        flexGrow={1}
        display="flex"
        justifyContent="flex-start"
        alignItems="center"
        alignContent={"center"}
        paddingX="8vh"
        paddingY="2vh"
        flexDirection={"column"}
        width={"auto"}
      >
        <Box>
          <FlexBox
            display="flex"
            justifyContent="end"
            alignItems="center"
            width={"100%"}
            paddingLeft={"5%"}
          >
            <ToggleButton
              onClick={toggleFormVisibility}
              buttonStyle="primary"
              m={[1, 1, 1, 1, 1, 2]}
              fontSize={[2, 2, 2, 2, 2, 6]}
            />
          </FlexBox>
          <CryptoForm
            inputVariant={"primary"}
            buttonVariant={"primary"}
            formTrigger={saveCryptoData}
            isHidden={formHidden}
            coins={coins}
            disabled={status ? true : false}
          />
        </Box>
        <SavedData savedData={data} coins={coins} session={userSession} />
      </Box>
    </CryptoInvestmentTrackerLayout>
  );
};

export default IndexPage;
